rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- User Profiles ---
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if false; // Do not allow users to delete their own profiles
    }

    // --- Public Pages (Communities, Entities, etc.) ---
    match /communities/{communityId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated(); // Allow joining/leaving
      allow delete: if isAuthenticated() && isOwner(resource.data.creatorId);
    }

    match /federated_entities/{entityId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && isOwner(resource.data.creatorId);
    }
    
    match /political_parties/{partyId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && isOwner(resource.data.creatorId);
    }

    match /study_groups/{groupId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && isOwner(resource.data.creatorId);
    }

    match /chat_groups/{groupId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update: if isAuthenticated();
        allow delete: if isAuthenticated() && isOwner(resource.data.creatorId);
    }

    // --- Content (Posts, Proposals) ---
    match /posts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated(); // For likes, comments, etc.
      allow delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }
    
    match /proposals/{proposalId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update: if isAuthenticated(); // For voting
        allow delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }

    match /events/{eventId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update: if isAuthenticated(); // For attending
        allow delete: if isAuthenticated() && isOwner(resource.data.creatorId);
    }
    
    match /tutorials/{tutorialId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && isOwner(resource.data.authorId);
        allow delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }
    
    // --- Sub-collections (Comments) ---
    match /posts/{postId}/comments/{commentId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && isOwner(resource.data.author.uid);
    }

     match /proposals/{proposalId}/comments/{commentId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && isOwner(resource.data.author.uid);
    }
  }
}
